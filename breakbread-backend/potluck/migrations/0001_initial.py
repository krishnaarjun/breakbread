# Generated by Django 2.2 on 2019-06-11 09:47

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('potluck_csv_meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True)),
            ],
            options={
                'db_table': 'global_meta',
            },
        ),
        migrations.CreateModel(
            name='HowYouHeard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medium', models.TextField(unique=True)),
                ('type', models.CharField(choices=[('default', 'Default'), ('other', 'Other')], help_text='Type of medium heard', max_length=100)),
            ],
            options={
                'db_table': 'how_you_heard',
            },
        ),
        migrations.CreateModel(
            name='PotluckFood',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='potluck food name', unique=True)),
                ('type', models.CharField(choices=[('veg', 'Veg'), ('non veg', 'Non Veg'), ('both', 'Both')], help_text='food type', max_length=100)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('meta_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'potluck_food',
            },
        ),
        migrations.CreateModel(
            name='PotluckSurvey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Survey Username', max_length=200)),
                ('email', models.EmailField(help_text='example@gmail.com', max_length=254)),
                ('phone', models.CharField(help_text='Mobile Number', max_length=20)),
                ('zipcode', models.IntegerField(help_text='Valid US Zip code')),
                ('ethnic_persuasion', models.CharField(choices=[('black or african american', 'Black or African American'), ('white', 'White'), ('prefer not to say', 'Prefer not to say')], help_text='Ethnic type', max_length=100)),
                ('involved', models.CharField(help_text='No of individuals involved', max_length=100)),
                ('church_affiliation', models.TextField(blank=True, help_text='Association with church')),
                ('availability', models.CharField(choices=[('tuesday', 'Tuesday'), ('thursday', 'Thursday'), ('tuesday and thursday', 'Tuesday and Thursday')], help_text='Ethnic type', max_length=100)),
                ('hosting_at', models.CharField(choices=[('home', 'Home'), ('church', 'Church')], help_text='Ethnic type', max_length=100)),
                ('dietary_restrictions_or_allergies', models.TextField(blank=True, help_text='Any restrictions or any allergies for food')),
                ('comments_and_queries', models.TextField(blank=True, help_text='Any comments or queries')),
                ('is_agreed', models.BooleanField(default=False, help_text='is agreed to terms and conditions')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('survey_meta_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('heard_from', models.ManyToManyField(blank=True, help_text='From where did you heard?', to='potluck.HowYouHeard')),
            ],
            options={
                'db_table': 'potluck_survey',
            },
        ),
        migrations.CreateModel(
            name='PotluckGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='potluck group name', unique=True)),
                ('group_meta_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('locked', 'Locked'), ('published', 'Published')], default='locked', help_text='status type', max_length=100)),
                ('hosting_on', models.DateTimeField(blank=True, null=True)),
                ('attendees', models.ManyToManyField(to='potluck.PotluckSurvey')),
                ('foods', models.ManyToManyField(to='potluck.PotluckFood')),
                ('manager', models.ForeignKey(blank=True, help_text='Manager of the group', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_manager', to='potluck.PotluckSurvey')),
            ],
            options={
                'db_table': 'potluck_group',
            },
        ),
        migrations.CreateModel(
            name='PotluckFoodGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('food_id', models.ForeignKey(blank=True, help_text='food assigned to survey user of a group', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='food_group_food_id', to='potluck.PotluckFood')),
                ('group_id', models.ForeignKey(blank=True, help_text='group of a survey user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='food_group_group_id', to='potluck.PotluckGroup')),
                ('guest_id', models.ForeignKey(blank=True, help_text='survey user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='food_group_guest_id', to='potluck.PotluckSurvey')),
            ],
            options={
                'db_table': 'potluck_food_group',
                'unique_together': {('group_id', 'food_id')},
            },
        ),
    ]
